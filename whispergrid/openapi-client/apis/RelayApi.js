"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI WhisperGrid
 * OpenAPI definition for WhisperGrid relays.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class RelayApi extends runtime.BaseAPI {
    /**
     *
     * Get relay invite by thumbprint
     */
    async getInviteRaw(requestParameters, initOverrides) {
        if (requestParameters["thumbprint"] == null) {
            throw new runtime.RequiredError("thumbprint", 'Required parameter "thumbprint" was null or undefined when calling getInvite().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/invite/{thumbprint}`.replace(`{${"thumbprint"}}`, encodeURIComponent(String(requestParameters["thumbprint"]))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InviteFromJSON)(jsonValue));
    }
    /**
     *
     * Get relay invite by thumbprint
     */
    async getInvite(requestParameters, initOverrides) {
        const response = await this.getInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get all threads for the current user
     */
    async getMyThreadsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/myThreads`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Get all threads for the current user
     */
    async getMyThreads(initOverrides) {
        const response = await this.getMyThreadsRaw(initOverrides);
        return await response.value();
    }
    /**
     *
     * Get a thread by threadId
     */
    async getThreadRaw(requestParameters, initOverrides) {
        if (requestParameters["threadId"] == null) {
            throw new runtime.RequiredError("threadId", 'Required parameter "threadId" was null or undefined when calling getThread().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters["threadId"]))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     *
     * Get a thread by threadId
     */
    async getThread(requestParameters, initOverrides) {
        const response = await this.getThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Post an invite
     */
    async publishInviteRaw(requestParameters, initOverrides) {
        if (requestParameters["invite"] == null) {
            throw new runtime.RequiredError("invite", 'Required parameter "invite" was null or undefined when calling publishInvite().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        const response = await this.request({
            path: `/invite`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.InviteToJSON)(requestParameters["invite"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Post an invite
     */
    async publishInvite(requestParameters, initOverrides) {
        const response = await this.publishInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Post a reply
     */
    async publishReplyRaw(requestParameters, initOverrides) {
        if (requestParameters["threadId"] == null) {
            throw new runtime.RequiredError("threadId", 'Required parameter "threadId" was null or undefined when calling publishReply().');
        }
        if (requestParameters["publishReplyRequest"] == null) {
            throw new runtime.RequiredError("publishReplyRequest", 'Required parameter "publishReplyRequest" was null or undefined when calling publishReply().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        const response = await this.request({
            path: `/thread/{threadId}`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters["threadId"]))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.PublishReplyRequestToJSON)(requestParameters["publishReplyRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Post a reply
     */
    async publishReply(requestParameters, initOverrides) {
        const response = await this.publishReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *
     * Reply to a relay invite
     */
    async replyToInviteRaw(requestParameters, initOverrides) {
        if (requestParameters["thumbprint"] == null) {
            throw new runtime.RequiredError("thumbprint", 'Required parameter "thumbprint" was null or undefined when calling replyToInvite().');
        }
        if (requestParameters["replyToInvite"] == null) {
            throw new runtime.RequiredError("replyToInvite", 'Required parameter "replyToInvite" was null or undefined when calling replyToInvite().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        const response = await this.request({
            path: `/invite/{thumbprint}/reply`.replace(`{${"thumbprint"}}`, encodeURIComponent(String(requestParameters["thumbprint"]))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ReplyToInviteToJSON)(requestParameters["replyToInvite"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReplyToInvite200ResponseFromJSON)(jsonValue));
    }
    /**
     *
     * Reply to a relay invite
     */
    async replyToInvite(requestParameters, initOverrides) {
        const response = await this.replyToInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.RelayApi = RelayApi;
