"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI WhisperGrid
 * OpenAPI definition for WhisperGrid relays.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class UserApi extends runtime.BaseAPI {
    /**
     *
     * Get password-protected backup by backupKey
     */
    async getBackupRaw(requestParameters, initOverrides) {
        if (requestParameters["backupKey"] == null) {
            throw new runtime.RequiredError("backupKey", 'Required parameter "backupKey" was null or undefined when calling getBackup().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/backup/{backupKey}`.replace(`{${"backupKey"}}`, encodeURIComponent(String(requestParameters["backupKey"]))),
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     *
     * Get password-protected backup by backupKey
     */
    async getBackup(requestParameters, initOverrides) {
        const response = await this.getBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *
     * Get a login challenge
     */
    async getLoginChallengeRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/login/challenge`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     *
     * Get a login challenge
     */
    async getLoginChallenge(initOverrides) {
        const response = await this.getLoginChallengeRaw(initOverrides);
        return await response.value();
    }
    /**
     *
     * Login with a challenge
     */
    async loginWithChallengeRaw(requestParameters, initOverrides) {
        if (requestParameters["loginRequest"] == null) {
            throw new runtime.RequiredError("loginRequest", 'Required parameter "loginRequest" was null or undefined when calling loginWithChallenge().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        const response = await this.request({
            path: `/login`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LoginRequestToJSON)(requestParameters["loginRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     *
     * Login with a challenge
     */
    async loginWithChallenge(requestParameters, initOverrides) {
        const response = await this.loginWithChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     *
     * Logs out current logged in user session
     */
    async logoutUserRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/user/logout`,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     *
     * Logs out current logged in user session
     */
    async logoutUser(initOverrides) {
        await this.logoutUserRaw(initOverrides);
    }
    /**
     *
     * Upload a password-protected backup
     */
    async uploadBackupRaw(requestParameters, initOverrides) {
        if (requestParameters["backupKey"] == null) {
            throw new runtime.RequiredError("backupKey", 'Required parameter "backupKey" was null or undefined when calling uploadBackup().');
        }
        if (requestParameters["uploadBackupRequest"] == null) {
            throw new runtime.RequiredError("uploadBackupRequest", 'Required parameter "uploadBackupRequest" was null or undefined when calling uploadBackup().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        const response = await this.request({
            path: `/backup/{backupKey}`.replace(`{${"backupKey"}}`, encodeURIComponent(String(requestParameters["backupKey"]))),
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UploadBackupRequestToJSON)(requestParameters["uploadBackupRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     *
     * Upload a password-protected backup
     */
    async uploadBackup(requestParameters, initOverrides) {
        const response = await this.uploadBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.UserApi = UserApi;
