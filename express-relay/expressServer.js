// const { Middleware } = require('swagger-express-middleware');
const http = require("http");
const fs = require("fs");
const path = require("path");
const swaggerUI = require("swagger-ui-express");
const jsYaml = require("js-yaml");
const express = require("express");
const cors = require("cors");
const cookieParser = require("cookie-parser");
const bodyParser = require("body-parser");
const OpenApiValidator = require("express-openapi-validator");
// const router = require("./utils/openapiRouter");
const logger = require("./logger");
// const config = require("./config");
var morgan = require("morgan");

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      console.log("openApiYaml", openApiYaml);
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error("failed to start Express Server", e.message);
      console.error(e);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(
      morgan("combined", {
        // immediate: true,
      }),
    );
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: "14MB" }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    //Simple test to see that the server is up and responding
    this.app.get("/", (req, res) => {
      res.redirect("/WhisperGrid");
    });
    this.app.use(
      "/WhisperGrid",
      express.static(path.join(__dirname, "../dist")),
    );
    this.app.get("/hello", (req, res) =>
      res.send(`Hello World. path: ${this.openApiPath}`),
    );
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get("/openapi", (req, res) =>
      res.sendFile(path.join(__dirname, "api", "openapi.yaml")),
    );
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use(
      "/api-docs",
      swaggerUI.serve,
      swaggerUI.setup(this.schema, {}),
    );
    this.app.get("/login-redirect", (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get("/oauth2-redirect.html", (req, res) => {
      res.status(200);
      res.json(req.query);
    });
  }

  launch() {
    this.app.use(async (err, req, res, next) => {
      try {
        console.log("callNext?");
        return next();
      } catch (e) {
        console.log(e);
        return res.status(500).json({ error: e.message });
      }
    });
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        validateResponses: true,
        validateRequests: true,
        validateApiSpec: true,
        operationHandlers: path.join(__dirname, "routes"),
      }),
    );

    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars
    this.app.use((err, req, res, next) => {
      // format error
      console.log("err", err);
      res.status(err.status || 500).json({
        message: err.message,
        errors: err.errors,
      });
    });

    http.createServer(this.app).listen(this.port);
    console.log(`Listening on http://localhost:${this.port}`);
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
