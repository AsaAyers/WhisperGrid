/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI WhisperGrid
 * OpenAPI definition for WhisperGrid relays.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ChallengeRequest, UploadBackupRequest } from "../models/index";
import {
  ChallengeRequestFromJSON,
  ChallengeRequestToJSON,
  UploadBackupRequestFromJSON,
  UploadBackupRequestToJSON,
} from "../models/index";

export interface GetBackupRequest {
  backupKey: string;
}

export interface LoginWithChallengeRequest {
  challengeRequest: ChallengeRequest;
}

export interface RemoveBackupRequest {
  backupKey: string;
  challengeRequest: ChallengeRequest;
}

export interface UploadBackupOperationRequest {
  backupKey: string;
  uploadBackupRequest: UploadBackupRequest;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   *
   * Get password-protected backup by backupKey
   */
  async getBackupRaw(
    requestParameters: GetBackupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["backupKey"] == null) {
      throw new runtime.RequiredError(
        "backupKey",
        'Required parameter "backupKey" was null or undefined when calling getBackup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/backup/{backupKey}`.replace(
          `{${"backupKey"}}`,
          encodeURIComponent(String(requestParameters["backupKey"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Get password-protected backup by backupKey
   */
  async getBackup(
    requestParameters: GetBackupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.getBackupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   *
   * Get a login challenge
   */
  async getLoginChallengeRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/login/challenge`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Get a login challenge
   */
  async getLoginChallenge(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.getLoginChallengeRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   * Login with a challenge
   */
  async loginWithChallengeRaw(
    requestParameters: LoginWithChallengeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["challengeRequest"] == null) {
      throw new runtime.RequiredError(
        "challengeRequest",
        'Required parameter "challengeRequest" was null or undefined when calling loginWithChallenge().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ChallengeRequestToJSON(requestParameters["challengeRequest"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Login with a challenge
   */
  async loginWithChallenge(
    requestParameters: LoginWithChallengeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.loginWithChallengeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   *
   * Logs out current logged in user session
   */
  async logoutUserRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/user/logout`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   * Logs out current logged in user session
   */
  async logoutUser(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.logoutUserRaw(initOverrides);
  }

  /**
   *
   * Upload a password-protected backup
   */
  async removeBackupRaw(
    requestParameters: RemoveBackupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["backupKey"] == null) {
      throw new runtime.RequiredError(
        "backupKey",
        'Required parameter "backupKey" was null or undefined when calling removeBackup().',
      );
    }

    if (requestParameters["challengeRequest"] == null) {
      throw new runtime.RequiredError(
        "challengeRequest",
        'Required parameter "challengeRequest" was null or undefined when calling removeBackup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/backup/{backupKey}`.replace(
          `{${"backupKey"}}`,
          encodeURIComponent(String(requestParameters["backupKey"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: ChallengeRequestToJSON(requestParameters["challengeRequest"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Upload a password-protected backup
   */
  async removeBackup(
    requestParameters: RemoveBackupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.removeBackupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   *
   * Upload a password-protected backup
   */
  async uploadBackupRaw(
    requestParameters: UploadBackupOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters["backupKey"] == null) {
      throw new runtime.RequiredError(
        "backupKey",
        'Required parameter "backupKey" was null or undefined when calling uploadBackup().',
      );
    }

    if (requestParameters["uploadBackupRequest"] == null) {
      throw new runtime.RequiredError(
        "uploadBackupRequest",
        'Required parameter "uploadBackupRequest" was null or undefined when calling uploadBackup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/backup/{backupKey}`.replace(
          `{${"backupKey"}}`,
          encodeURIComponent(String(requestParameters["backupKey"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UploadBackupRequestToJSON(
          requestParameters["uploadBackupRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Upload a password-protected backup
   */
  async uploadBackup(
    requestParameters: UploadBackupOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.uploadBackupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
